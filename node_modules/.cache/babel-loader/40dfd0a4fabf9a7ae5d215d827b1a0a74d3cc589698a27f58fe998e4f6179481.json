{"ast":null,"code":"var _jsxFileName = \"/Users/janreigtorra/Desktop/response-type-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ResponseTypePredictor() {\n  _s();\n  const [context, setContext] = useState('');\n  const [responseType, setResponseType] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const handleSubmit = async () => {\n    setLoading(true);\n    setResponseType(null);\n    try {\n      const response = await axios.post('http://localhost:8000/predict', {\n        context\n      });\n      setResponseType(response.data.response_type);\n    } catch (error) {\n      console.error(\"Prediction failed\", error);\n      setResponseType(\"Error occurred. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 flex items-center justify-center p-4\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"w-full max-w-2xl p-6 shadow-xl\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-2xl font-bold mb-4\",\n          children: \"Response Type Predictor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          value: context,\n          onChange: e => setContext(e.target.value),\n          placeholder: \"Enter the patient's context here...\",\n          className: \"mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSubmit,\n          disabled: loading,\n          children: loading ? \"Predicting...\" : \"Get Response Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), responseType && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-lg font-medium\",\n            children: \"Suggested Response Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xl font-bold text-blue-600\",\n            children: responseType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(ResponseTypePredictor, \"Ysvi2bH8QgWPV4d/Kh7o9zoVzCM=\");\n_c = ResponseTypePredictor;\nvar _c;\n$RefreshReg$(_c, \"ResponseTypePredictor\");","map":{"version":3,"names":["React","useState","axios","Card","CardContent","Input","Button","jsxDEV","_jsxDEV","ResponseTypePredictor","_s","context","setContext","responseType","setResponseType","loading","setLoading","handleSubmit","response","post","data","response_type","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/janreigtorra/Desktop/response-type-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function ResponseTypePredictor() {\n  const [context, setContext] = useState('');\n  const [responseType, setResponseType] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    setResponseType(null);\n    try {\n      const response = await axios.post('http://localhost:8000/predict', {\n        context,\n      });\n      setResponseType(response.data.response_type);\n    } catch (error) {\n      console.error(\"Prediction failed\", error);\n      setResponseType(\"Error occurred. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl p-6 shadow-xl\">\n        <CardContent>\n          <h1 className=\"text-2xl font-bold mb-4\">Response Type Predictor</h1>\n          <Input\n            value={context}\n            onChange={(e) => setContext(e.target.value)}\n            placeholder=\"Enter the patient's context here...\"\n            className=\"mb-4\"\n          />\n          <Button onClick={handleSubmit} disabled={loading}>\n            {loading ? \"Predicting...\" : \"Get Response Type\"}\n          </Button>\n          {responseType && (\n            <div className=\"mt-6\">\n              <p className=\"text-lg font-medium\">Suggested Response Type:</p>\n              <p className=\"text-xl font-bold text-blue-600\">{responseType}</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}